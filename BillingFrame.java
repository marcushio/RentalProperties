import javax.swing.*;
import javax.swing.table.TableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.sql.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.GregorianCalendar;

/**
 * The frame that displays all the data related to the billing data. Works by querying DB based on dates that are past
 * due and lists the appropriate action.
 *
 * @author Marcus Trujillo
 * @version CS2251 - Intermediate Programming
 * email: mtrujillo255@cnm.edu
 * assignment due date:
 */

public class BillingFrame extends JInternalFrame {
    private String host = "127.0.0.1";

    private Socket client;
    private ObjectOutputStream output;
    private ObjectInputStream input;

    /**
     * Creates new form BillingFrame
     */
    public BillingFrame() {
        initComponents();
        selectional();
    }

    public void selectional(){

            try {
                connectToServer();
                getStreams();
                String sql = "SELECT * FROM Tenants WHERE RentPaid < '" + getDueDate() + "'";
                System.out.println("Here is our sql command: " + sql);
                Command command = new Command("Tenants", sql, CommandWord.RETRIEVE );
                output.writeObject(command);
                TableModel model  = (TableModel) input.readObject();
                billingTable.setModel(model);
            } catch (Exception e) {
                e.printStackTrace();
            }
    }

    private void connectToServer() throws IOException {
        client = new Socket(host , 12345);
    }

    private void getStreams() throws IOException{
        output = new ObjectOutputStream(client.getOutputStream());
        output.flush();
        input = new ObjectInputStream(client.getInputStream());
    }

    /**
     * Once we're finished with the connection of the server then we can just close all the connections that we've
     */
    private void closeConnection(){
        try {
            output.close();
            input.close();
            client.close();
        } catch (Exception ex){
            //can we print error in JFrame?
            ex.printStackTrace();
        }
    }

    private LocalDate getDueDate(){
        Calendar calendar = new GregorianCalendar() ;
        int month = calendar.get(Calendar.MONTH) + 1; // 0=January 11=December so we add 1;
        LocalDate dueDate = LocalDate.of(2019, month, 1);
        return dueDate;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        billingTable = new javax.swing.JTable();
        paidButton = new javax.swing.JButton();
        tenantIDLabel = new javax.swing.JLabel();
        tenantIDtxt = new javax.swing.JTextField();
        updateButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        billingTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null}
                },
                new String [] {
                        "TenantID", "LastName", "FirstName", "Phone", "PaidDate", "Email"
                }
        ));
        jScrollPane1.setViewportView(billingTable);

        paidButton.setText("Pay in Full");
        paidButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paidButtonActionPerformed(evt);
            }
        });

        tenantIDLabel.setText("TenantID");

        updateButton.setText("Refresh Table");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
                                .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(updateButton)
                                .addGap(22, 22, 22))
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(paidButton, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(tenantIDLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(tenantIDtxt)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(paidButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(tenantIDLabel)
                                        .addComponent(tenantIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
                                .addComponent(updateButton)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    private void paidButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String query = "update tenants set RentPaid = '" + LocalDate.now() +
                    "' where TenantID = '" + tenantIDtxt.getText() + "'";
            Command command = new Command("Tenants", query, CommandWord.UPDATE);

            connectToServer();
            getStreams();
            output.writeObject(command);
        } catch (Exception ex){
            ex.printStackTrace();
        }
        selectional();
    }

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {
        selectional();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BillingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BillingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BillingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BillingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BillingFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable billingTable;
    private javax.swing.JButton paidButton;
    private javax.swing.JLabel tenantIDLabel;
    private javax.swing.JTextField tenantIDtxt;
    private javax.swing.JButton updateButton;
    // End of variables declaration
}
